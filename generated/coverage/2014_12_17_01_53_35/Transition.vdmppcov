class Transition
types
	public Weight = nat1;
instance variables
	public Resets : set of Place := {};
	public Inhibitors : set of Place := {};
	public Inputs : map Place to Weight := {|->};
	public Outputs : map Place to Weight := {|->};
operations
	-- Constructor for the Transition.
	-- @param inputs: the set of places that are inputs to this transition
	-- @param outputs: the set of places that are outputs of this transition
	-- @param resets: the set of places that are reseted by this transition
	-- @param inhibitors: the set of places that inhibit this transition
	-- @returns the transition
	public Transition(inputs : map Place to Weight, outputs : map Place to Weight, resets : set of Place, inhibitors : set of Place) 
						result: Transition == (
		Inputs := inputs;
		Outputs := outputs;
		Resets := resets;
		Inhibitors := inhibitors;
		return self;
	)
	pre (inputs <> {|->} or resets <> {} or inhibitors <> {}) and outputs <> {|->}
	post result.Inputs = inputs and result.Outputs = outputs and result.Resets = resets and result.Inhibitors = inhibitors;
	
functions
-- TODO Define functions here
traces
-- TODO Define Combinatorial Test Traces here
end Transition