class PetriNet
instance variables
	public Places : set of Place := {};
	public Transitions : set of Transition := {};
	public InitialMarking : map Place to nat  := {|->};
	public CurrentMarking : map Place to nat := {|->};
	
	inv forall t in set Transitions & dom t.Inputs subset Places and
																		dom t.Outputs subset Places and
																		t.Resets subset Places and
																		t.Inhibitors subset Places;
	
operations



	-- Constructor for the Petri Net.
	-- @param places: the set of places in the net
	-- @param transitions: the set of transitions in the net
	-- @returns the petri net
	public PetriNet(places: set of Place, transitions: set of Transition) result : PetriNet == (
						Places := places;
						Transitions := transitions;
						InitialMarking := {|->};
						CurrentMarking := InitialMarking;
						
						return self;				
	)
	pre forall t in set Transitions & dom t.Inputs subset Places and
																		dom t.Outputs subset Places
	post result.Places = places and result.Transitions = transitions and 
								result.InitialMarking = {|->} and result.CurrentMarking = {|->};
					
								
								
	-- Checks if a transition is enabled at the time.
	-- @param t: the transition to check
	-- @returns true if the transition is enabled, false otherwise
	public transitionEnabled(t : Transition) result : bool == (
		dcl enabled: bool := true;
		
		for all i in set dom t.Inputs do (
			if CurrentMarking(i) < t.Inputs(i) then enabled := false;
		);
		
		for all i in set t.Inhibitors do (
			if CurrentMarking(i) > 0 then enabled := false;
		);
		
		return enabled;
	)
	pre t in set Transitions;
	
	
	
	-- Gets all enabled transitions in the net.
	-- @returns a set containing all enabled transitions at the time
	public getEnabled() result : set of Transition == (
		dcl enabledTrans: set of Transition := {};
		
		for all t in set Transitions do 
			if transitionEnabled(t) then enabledTrans := enabledTrans union {t};
			
		return enabledTrans;
	)
	post result subset Transitions and
				forall t in set result & forall i in set dom t.Inputs & CurrentMarking(i) = t.Inputs(i);
	
	
	
	-- Resets the petri net marking to its initial marking.
	public reset() == (
		CurrentMarking := InitialMarking;
	)
	post CurrentMarking = InitialMarking;
	
	
	
	-- Triggers the selected transition if it's enabled.
	-- @param t: The transition to trigger.
	public fireTransition(t : Transition) == (
		if(transitionEnabled(t)) then (
			for all i in set dom t.Inputs do
				CurrentMarking := CurrentMarking ++ {i |-> CurrentMarking(i) - t.Inputs(i)};
		
			for all o in set dom t.Outputs do
				CurrentMarking := CurrentMarking ++ {o |-> CurrentMarking(o) + t.Outputs(o)};
				
			for all r in set t.Resets do
				CurrentMarking := CurrentMarking ++ {r |-> 0};
		);
	)
	pre t in set Transitions and 
				forall i in set dom t.Inputs & CurrentMarking(i) = t.Inputs(i)
	post (forall p in set dom t.Inputs & CurrentMarking(p) = CurrentMarking~(p) - t.Inputs(p)) and
			 (forall p in set dom t.Outputs & CurrentMarking(p) = CurrentMarking~(p) + t.Outputs(p));
	
	
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end PetriNet